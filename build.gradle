plugins {
	id 'java'
	id 'maven-publish'
	id 'idea'
	id 'eclipse'
	id 'fabric-loom' version '1.7.+'
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'maven-publish'
	apply plugin: 'fabric-loom'

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	group = project.maven_group

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	loom {
		runs {
			testmodClient {
				client()
				source(sourceSets.testmod)

				name = "Test Mod Client"
			}

			testmodServer {
				server()
				source(sourceSets.testmod)

				name = "Test Mod Server"
			}
		}

		createRemapConfigurations(sourceSets.testmod)
	}

	dependencies {
		minecraft "com.mojang:minecraft:$project.minecraft_version"
		mappings "net.fabricmc:yarn:$project.yarn_mappings:v2"
		modImplementation "net.fabricmc:fabric-loader:$project.loader_version"

		compileOnly "com.google.code.findbugs:jsr305:3.0.2"

		testmodImplementation sourceSets.main.output
	}

	repositories {
		maven {
			name = 'TerraformersMC'
			url = 'https://maven.terraformersmc.com/'
		}
	}

	java {
		withSourcesJar()

		sourceCompatibility = JavaVersion.VERSION_21
		targetCompatibility = JavaVersion.VERSION_21
	}

	tasks.withType(ProcessResources).configureEach {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	tasks.withType(JavaCompile) {
		it.options.encoding = "UTF-8"
		it.options.release = 21
	}
}

subprojects {
	version = rootProject.version

	publish {
		onlyIf {
			checkVersion(archivesBaseName, version)
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
			}
		}

		setupRepositories(repositories)
	}

	javadoc.enabled = false
}

dependencies {
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	afterEvaluate {
		subprojects.each {
			implementation project(path: ":${it.path}", configuration: "namedElements")
			testmodImplementation project(":${it.path}").sourceSets.testmod.output
		}
	}
}

void setupRepositories(RepositoryHandler repositories) {
	//repositories.mavenLocal() // uncomment for testing
	def ENV = System.getenv()
	if (ENV.MAVEN_URL) {
		repositories.maven {
			url ENV.MAVEN_URL
			credentials {
				username ENV.MAVEN_USERNAME
				password ENV.MAVEN_PASSWORD
			}
		}
	}
}

ext.checkVersion = { archivesBaseName, version ->
	try {
		def xml = new URL("https://maven.terraformersmc.com/com/terraformersmc/terraform-api/$archivesBaseName/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			println "$archivesBaseName version $version will not be published; already exists"
			return false
		} else {
			println "$archivesBaseName version $version will be published"
			return true
		}
	} catch (FileNotFoundException ignored) {
		println "$archivesBaseName is not on maven yet"
		return true
	}
}
